name: backup_media_system

# IMMICH API KEY NEEDED, GET IT AFTER SETTING IT UP

services:
  backupsystem-jellyfin-camera:
    env_file: 
      - ./.env
    image: jellyfin/jellyfin
    container_name: backupsystem-jellyfin-camera
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./jellyconfig:/config
      - ./jellycache:/cache
      - type: bind
        source: ${CAMERA_PATH}
        target: /media/camera
        bind:
          create_host_path: true
      - type: bind
        source: ${MUSIC_PATH}
        target: /media/music
        bind:
          create_host_path: true
      - type: bind
        source: ${TV_PATH}
        target: /media/tv
        bind:
          create_host_path: true
    restart: unless-stopped
    ports:
      - ${JELLYFIN_PORT}:8096
      #- ${JELLYFIN_HTTPS_PORT}:8920
      #- ${JELLYFIN_DISCOVERY_PORT}:7359/udp
      #- ${JELLYFIN_DLNA_PORT}:1900/udp

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # user: "${PUID}:${PGID}"

    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
      - type: bind
        source: ${PC_SCREENSHOTS_PATH}
        target: /pc/screenshots
        bind:
          create_host_path: true
        read_only: true
    env_file:
      - .env
    ports:
      - ${IMMICH_PORT}:2283
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # user: "${PUID}:${PGID}"

    volumes:
      - ${MODEL_CACHE_LOCATION}:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false

  redis:
    container_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:905c4ee67b8e0aa955331960d2aa745781e6bd89afc44a8584bfd13bc890f0ae
    # user: "${PUID}:${PGID}"

    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    # user: "${PUID}:${PGID}"
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_DB=${DB_DATABASE_NAME}
      - POSTGRES_INITDB_ARGS=--data-checksums
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    healthcheck:
      test: >-
        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1;
        Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align
        --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')";
        echo "checksum failure count is $$Chksum";
        [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: >-
      postgres
      -c shared_preload_libraries=vectors.so
      -c 'search_path="$${user}", public, vectors'
      -c logging_collector=on
      -c max_wal_size=2GB
      -c shared_buffers=512MB
      -c wal_compression=on
    restart: always

  # AUTO IMMICH ALBUM GENERATOR
  # https://github.com/Salvoxia/immich-folder-album-creator?tab=readme-ov-file 
  immich-folder-album-creator:
    container_name: immich_folder_album_creator
    image: salvoxia/immich-folder-album-creator:latest
    restart: unless-stopped
    environment:
      API_URL: http://immich_server:2283/api
      API_KEY: ${IMMICH_API_KEY}
      ROOT_PATH: /pc/screenshots
      ALBUM_LEVELS: 1
      ALBUM_SEPARATOR: ""
      # backslashes must be escaped in YAML
      ALBUM_NAME_POST_REGEX1: "'[\\d]+_|\\d+\\s\\w{3}'"
      ALBUM_NAME_POST_REGEX2: "'_' ' '"
      LOG_LEVEL: DEBUG
      CRON_EXPRESSION: "0 */6 * * *"
      TZ: Asia/Kolkata
      # Hide the photos from Photos view
      # https://github.com/Salvoxia/immich-folder-album-creator?tab=readme-ov-file#automatic-archiving
      ARCHIVE: "true"
      FIND_ARCHIVED_ASSETS: "true"